package bean;

import org.greenrobot.greendao.annotation.*;

import dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import dao.ArticleBeanDao;
import dao.UserBeanDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "article".
 */
@Entity(active = true, nameInDb = "article")
public class ArticleBean {

    @Id(autoincrement = true)
    private Long id;
    private String title;
    private Long user_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient ArticleBeanDao myDao;

    @ToOne(joinProperty = "user_id")
    private UserBean userBean;

    @Generated
    private transient Long userBean__resolvedKey;

    @Generated
    public ArticleBean() {
    }

    public ArticleBean(Long id) {
        this.id = id;
    }

    @Generated
    public ArticleBean(Long id, String title, Long user_id) {
        this.id = id;
        this.title = title;
        this.user_id = user_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getArticleBeanDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Long getUser_id() {
        return user_id;
    }

    public void setUser_id(Long user_id) {
        this.user_id = user_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public UserBean getUserBean() {
        Long __key = this.user_id;
        if (userBean__resolvedKey == null || !userBean__resolvedKey.equals(__key)) {
            __throwIfDetached();
            UserBeanDao targetDao = daoSession.getUserBeanDao();
            UserBean userBeanNew = targetDao.load(__key);
            synchronized (this) {
                userBean = userBeanNew;
            	userBean__resolvedKey = __key;
            }
        }
        return userBean;
    }

    @Generated
    public void setUserBean(UserBean userBean) {
        synchronized (this) {
            this.userBean = userBean;
            user_id = userBean == null ? null : userBean.getId();
            userBean__resolvedKey = user_id;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
